---

# Set Firewall rules
- name: install GCS packages
  become: yes
  become_flags: --login
  include: install_gcs_packages.yml

- name: Set [Globus].ClientId
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: Globus
    option: ClientId
    value: "{{ client_id }}"

- name: Set [Globus].ClientSecret
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: Globus
    option: ClientSecret
    value: "{{ client_secret }}"

- name: Set [Endpoint].Name
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: Endpoint
    option: Name
    value: "{{ endpoint_name }}"

- name: Set [Endpoint].ServerName
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: Endpoint
    option: ServerName
    value: "{{ public_interface }}"

- name: Set [LetsEncrypt].Email
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: LetsEncrypt
    option: Email
    value: "{{ admin_email }}"

- name: Set [LetsEncrypt].AgreeToS
  become: yes
  ini_file:
    dest: /etc/globus-connect-server.conf
    section: LetsEncrypt
    option: AgreeToS
    value: "True"

- name: Workaround for httpd to talk to Ceph on localhost
  become: yes
  command: setsebool httpd_can_network_connect true

- name: Add Globus radosgw account
  become: yes
  run_once: true
  command: radosgw-admin user create --uid="{{ ceph_federated_s3_user }}" --display-name "Federated S3 Gateway" --caps="users=read"
  register: rgw_output

#
# If globus-connect-server-config endpoint show fails, assume setup needs to be run
#
- name: Check if endpoint has already been setup
  become: yes
  command: /sbin/globus-connect-server-config endpoint show
  register: config_endpoint
  ignore_errors: True

#
# Run setup only when 'config endpoint' failed
#
- name: Setup Globus Connect Server
  become: yes
  command: /sbin/globus-connect-server-setup
  register: setup_run
  when: config_endpoint is failed

#
# Only run `config endpoint admin show` if setup was not run this iteration
#
- name: Checking if "{{ endpoint_admin }}" is an endpoint administrator
  become: yes
  register: admin_list
  command: /sbin/globus-connect-server-config endpoint admin show
  when: setup_run is skipped

#
# Only add the admin role if it is not already present
#
- name: Add "{{ endpoint_admin }}" as an endpoint administrator
  become: yes
  command: /sbin/globus-connect-server-config endpoint admin add-role "{{ endpoint_admin }}"
  when: setup_run is skipped and item not in admin_list.stdout_lines
  with_items:
    - "administrator | identity | {{ endpoint_admin }}"

#
# Only run `storage-gateway list` if setup was not run this iteration
#
- name: Checking if Ceph Storage Gateway has been configured
  become: yes
  register: gw_list
  command: /sbin/globus-connect-server-config storage-gateway list
  when: setup_run is skipped

#
# Only add the gateway if it does not already exist
#
- name: Add the Ceph Storage Gateway
  become: yes
  command: /sbin/globus-connect-server-config storage-gateway create --connector Ceph --ceph-admin-key-id "{{ (rgw_output.stdout | from_json)['keys'][0].access_key }}" --ceph-admin-secret-key "{{ (rgw_output.stdout | from_json)['keys'][0].secret_key }}" --display-name "Ceph Storage Gateway" --domain "{{ idp_domain }}" --root / --s3-endpoint "{{ ceph_url }}"
  when: setup_run is skipped and gw_list is succeeded and item is not search(' \| Ceph \| Ceph Storage Gateway \| /')
  with_items:
    - "{{ gw_list.stdout }}"
